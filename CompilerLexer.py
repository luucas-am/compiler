# Generated from Compiler.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,3,19,174,8,19,1,20,1,20,1,20,1,20,1,20,3,
        20,181,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
        26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,5,29,202,8,29,10,29,12,
        29,205,9,29,1,29,5,29,208,8,29,10,29,12,29,211,9,29,1,30,3,30,214,
        8,30,1,30,4,30,217,8,30,11,30,12,30,218,1,31,1,31,5,31,223,8,31,
        10,31,12,31,226,9,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,234,8,32,
        10,32,12,32,237,9,32,1,32,1,32,1,33,4,33,242,8,33,11,33,12,33,243,
        1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,1,0,10,2,0,43,43,45,45,2,0,42,42,47,47,2,0,60,60,62,62,
        2,0,65,90,97,122,1,0,95,95,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        1,0,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,258,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,77,1,0,0,0,5,85,
        1,0,0,0,7,93,1,0,0,0,9,99,1,0,0,0,11,103,1,0,0,0,13,109,1,0,0,0,
        15,112,1,0,0,0,17,117,1,0,0,0,19,121,1,0,0,0,21,127,1,0,0,0,23,132,
        1,0,0,0,25,138,1,0,0,0,27,145,1,0,0,0,29,148,1,0,0,0,31,153,1,0,
        0,0,33,158,1,0,0,0,35,160,1,0,0,0,37,162,1,0,0,0,39,173,1,0,0,0,
        41,180,1,0,0,0,43,182,1,0,0,0,45,184,1,0,0,0,47,186,1,0,0,0,49,188,
        1,0,0,0,51,190,1,0,0,0,53,192,1,0,0,0,55,194,1,0,0,0,57,196,1,0,
        0,0,59,199,1,0,0,0,61,213,1,0,0,0,63,220,1,0,0,0,65,229,1,0,0,0,
        67,241,1,0,0,0,69,70,5,80,0,0,70,71,5,82,0,0,71,72,5,79,0,0,72,73,
        5,71,0,0,73,74,5,82,0,0,74,75,5,65,0,0,75,76,5,77,0,0,76,2,1,0,0,
        0,77,78,5,73,0,0,78,79,5,78,0,0,79,80,5,84,0,0,80,81,5,69,0,0,81,
        82,5,71,0,0,82,83,5,69,0,0,83,84,5,82,0,0,84,4,1,0,0,0,85,86,5,66,
        0,0,86,87,5,79,0,0,87,88,5,79,0,0,88,89,5,76,0,0,89,90,5,69,0,0,
        90,91,5,65,0,0,91,92,5,78,0,0,92,6,1,0,0,0,93,94,5,66,0,0,94,95,
        5,69,0,0,95,96,5,71,0,0,96,97,5,73,0,0,97,98,5,78,0,0,98,8,1,0,0,
        0,99,100,5,69,0,0,100,101,5,78,0,0,101,102,5,68,0,0,102,10,1,0,0,
        0,103,104,5,87,0,0,104,105,5,72,0,0,105,106,5,73,0,0,106,107,5,76,
        0,0,107,108,5,69,0,0,108,12,1,0,0,0,109,110,5,68,0,0,110,111,5,79,
        0,0,111,14,1,0,0,0,112,113,5,82,0,0,113,114,5,69,0,0,114,115,5,65,
        0,0,115,116,5,68,0,0,116,16,1,0,0,0,117,118,5,86,0,0,118,119,5,65,
        0,0,119,120,5,82,0,0,120,18,1,0,0,0,121,122,5,70,0,0,122,123,5,65,
        0,0,123,124,5,76,0,0,124,125,5,83,0,0,125,126,5,69,0,0,126,20,1,
        0,0,0,127,128,5,84,0,0,128,129,5,82,0,0,129,130,5,85,0,0,130,131,
        5,69,0,0,131,22,1,0,0,0,132,133,5,87,0,0,133,134,5,82,0,0,134,135,
        5,73,0,0,135,136,5,84,0,0,136,137,5,69,0,0,137,24,1,0,0,0,138,139,
        5,83,0,0,139,140,5,84,0,0,140,141,5,82,0,0,141,142,5,73,0,0,142,
        143,5,78,0,0,143,144,5,71,0,0,144,26,1,0,0,0,145,146,5,73,0,0,146,
        147,5,70,0,0,147,28,1,0,0,0,148,149,5,84,0,0,149,150,5,72,0,0,150,
        151,5,69,0,0,151,152,5,78,0,0,152,30,1,0,0,0,153,154,5,69,0,0,154,
        155,5,76,0,0,155,156,5,83,0,0,156,157,5,69,0,0,157,32,1,0,0,0,158,
        159,7,0,0,0,159,34,1,0,0,0,160,161,7,1,0,0,161,36,1,0,0,0,162,163,
        5,92,0,0,163,38,1,0,0,0,164,174,7,2,0,0,165,166,5,62,0,0,166,174,
        5,61,0,0,167,168,5,60,0,0,168,174,5,61,0,0,169,170,5,61,0,0,170,
        174,5,61,0,0,171,172,5,60,0,0,172,174,5,62,0,0,173,164,1,0,0,0,173,
        165,1,0,0,0,173,167,1,0,0,0,173,169,1,0,0,0,173,171,1,0,0,0,174,
        40,1,0,0,0,175,176,5,79,0,0,176,181,5,82,0,0,177,178,5,65,0,0,178,
        179,5,78,0,0,179,181,5,68,0,0,180,175,1,0,0,0,180,177,1,0,0,0,181,
        42,1,0,0,0,182,183,5,126,0,0,183,44,1,0,0,0,184,185,5,59,0,0,185,
        46,1,0,0,0,186,187,5,46,0,0,187,48,1,0,0,0,188,189,5,58,0,0,189,
        50,1,0,0,0,190,191,5,44,0,0,191,52,1,0,0,0,192,193,5,40,0,0,193,
        54,1,0,0,0,194,195,5,41,0,0,195,56,1,0,0,0,196,197,5,58,0,0,197,
        198,5,61,0,0,198,58,1,0,0,0,199,203,7,3,0,0,200,202,7,4,0,0,201,
        200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,
        209,1,0,0,0,205,203,1,0,0,0,206,208,7,5,0,0,207,206,1,0,0,0,208,
        211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,60,1,0,0,0,211,209,
        1,0,0,0,212,214,7,0,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,216,
        1,0,0,0,215,217,7,6,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,
        1,0,0,0,218,219,1,0,0,0,219,62,1,0,0,0,220,224,5,34,0,0,221,223,
        8,7,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,
        1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,34,0,0,228,64,
        1,0,0,0,229,230,5,47,0,0,230,231,5,47,0,0,231,235,1,0,0,0,232,234,
        8,8,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,
        1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,6,32,0,0,239,66,
        1,0,0,0,240,242,7,9,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,
        1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,6,33,0,0,246,68,
        1,0,0,0,10,0,173,180,203,209,213,218,224,235,243,1,6,0,0
    ]

class CompilerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    INTEGER = 2
    BOOLEAN = 3
    BEGIN = 4
    END = 5
    WHILE = 6
    DO = 7
    READ = 8
    VAR = 9
    FALSE = 10
    TRUE = 11
    WRITE = 12
    STRING = 13
    IF = 14
    THEN = 15
    ELSE = 16
    OPAD = 17
    OPMULT = 18
    OPDIV = 19
    OPREL = 20
    OPLOG = 21
    OPNEG = 22
    PVIG = 23
    PONTO = 24
    DPONTOS = 25
    VIG = 26
    ABPAR = 27
    FPAR = 28
    ATRIB = 29
    ID = 30
    CTE = 31
    CADEIA = 32
    COMMENT = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'PROGRAM'", "'INTEGER'", "'BOOLEAN'", "'BEGIN'", "'END'", "'WHILE'", 
            "'DO'", "'READ'", "'VAR'", "'FALSE'", "'TRUE'", "'WRITE'", "'STRING'", 
            "'IF'", "'THEN'", "'ELSE'", "'\\'", "'~'", "';'", "'.'", "':'", 
            "','", "'('", "')'", "':='" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", "DO", 
            "READ", "VAR", "FALSE", "TRUE", "WRITE", "STRING", "IF", "THEN", 
            "ELSE", "OPAD", "OPMULT", "OPDIV", "OPREL", "OPLOG", "OPNEG", 
            "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", "FPAR", "ATRIB", 
            "ID", "CTE", "CADEIA", "COMMENT", "WS" ]

    ruleNames = [ "PROGRAM", "INTEGER", "BOOLEAN", "BEGIN", "END", "WHILE", 
                  "DO", "READ", "VAR", "FALSE", "TRUE", "WRITE", "STRING", 
                  "IF", "THEN", "ELSE", "OPAD", "OPMULT", "OPDIV", "OPREL", 
                  "OPLOG", "OPNEG", "PVIG", "PONTO", "DPONTOS", "VIG", "ABPAR", 
                  "FPAR", "ATRIB", "ID", "CTE", "CADEIA", "COMMENT", "WS" ]

    grammarFileName = "Compiler.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


